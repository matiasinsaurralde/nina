name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24.5'
  GOLANGCI_LINT_VERSION: 'v1.59.0'

jobs:
  # Build all components in parallel
  build:
    name: Build Components
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [api, ingress, nina]
        include:
          - component: api
            path: ./cmd/api
            binary: api
          - component: ingress
            path: ./cmd/ingress
            binary: ingress
          - component: nina
            path: ./cmd/nina
            binary: nina

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Build ${{ matrix.component }}
      run: |
        echo "Building ${{ matrix.component }}..."
        go build -v -o ${{ matrix.binary }} ${{ matrix.path }}
        echo "‚úÖ ${{ matrix.component }} built successfully"

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.component }}-binary
        path: ${{ matrix.binary }}
        retention-days: 1

  # Run tests with race detection
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Run tests with race detection
      run: |
        echo "Running tests with race detection..."
        go test -race -v -coverprofile=coverage.out ./...
        echo "‚úÖ Tests completed successfully"

    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.out -o coverage.html
        echo "üìä Coverage report generated"

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html
        retention-days: 30

    - name: Display coverage summary
      run: |
        echo "üìà Coverage Summary:"
        go tool cover -func=coverage.out

  # Lint code with golangci-lint
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}
        args: --timeout=5m --race --no-config --disable=errcheck,staticcheck

  # Integration test with Redis
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build

    services:
      redis:
        image: redis:alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Wait for Redis
      run: |
        echo "Waiting for Redis to be ready..."
        # Use netcat to check if Redis port is open
        timeout 30s bash -c 'until nc -z localhost 6379; do sleep 1; done'
        echo "‚úÖ Redis is ready"

    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        go test -v -race -tags=integration ./pkg/store/...
        echo "‚úÖ Integration tests completed"

    - name: Run unit tests with Miniredis
      run: |
        echo "Running unit tests with Miniredis..."
        go test -v -race ./pkg/store/...
        echo "‚úÖ Unit tests completed"

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run govulncheck
      run: |
        echo "Running security vulnerability scan..."
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
        echo "‚úÖ Security scan completed"

  # Final validation
  validate:
    name: Validate Build
    runs-on: ubuntu-latest
    needs: [build, test, lint, integration-test, security]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Validate go.mod
      run: |
        echo "Validating go.mod..."
        go mod verify
        echo "‚úÖ go.mod is valid"

    - name: Check for unused dependencies
      run: |
        echo "Checking for unused dependencies..."
        go mod tidy
        if [ -n "$(git status --porcelain)" ]; then
          echo "‚ùå Unused dependencies found. Please run 'go mod tidy'"
          git diff
          exit 1
        fi
        echo "‚úÖ No unused dependencies"

    - name: Validate formatting
      run: |
        echo "Checking code formatting..."
        if [ -n "$(gofmt -l .)" ]; then
          echo "‚ùå Code is not formatted. Please run 'go fmt ./...'"
          gofmt -l .
          exit 1
        fi
        echo "‚úÖ Code is properly formatted"

    - name: Success
      run: |
        echo "üéâ All validations passed!"
        echo "‚úÖ Build: All components built successfully"
        echo "‚úÖ Tests: All tests passed with race detection"
        echo "‚úÖ Lint: Code quality checks passed"
        echo "‚úÖ Integration: Redis integration tests passed"
        echo "‚úÖ Security: No vulnerabilities found" 